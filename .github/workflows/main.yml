name: Django CI/CD

on:
  push:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      DB_ENGINE: django.db.backends.mysql
      DB_NAME: test_db
      DB_USER: test_user
      DB_PASSWORD: test_password
      DB_HOST: 127.0.0.1
      DB_PORT: 3306

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        working-directory: ./core
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Wait for MySQL
        run: |
          sudo apt-get install -y mysql-client
          until mysqladmin ping -h 127.0.0.1 --silent; do
            echo "Waiting for DB..."
            sleep 3
          done

      - name: Run Migrations
        working-directory: ./core
        run: |
          python manage.py makemigrations
          python manage.py migrate

      - name: Run Tests
        working-directory: ./core
        run: python manage.py test

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu/suri
            git pull origin main

            source env/bin/activate
            pip install -r requirements.txt

            python manage.py migrate
            python manage.py migrate user
            python manage.py collectstatic --noinput

            pm2 restart django-app
            sudo systemctl restart nginx
